# -*- coding:utf-8 -*-
__author__ = 'gjw'
__time__ = '2018/1/20 0020 下午 4:07'

# 7-7 如何在环状数据结构中管理内存

"""
    在python中，垃圾回收器通过引用计数来回收垃圾对象，
    但某些环状数据结构（树，图...），存在对象间的循环引用，
    比如树的父节点引用子节点，子节点也同事引用父节点。
    此时同时del掉引用父子节点，两个对象不能被立即回收。
    
    如何解决此类的内存管理问题？
"""


class A(object):
    def __del__(self):
        print('in A.__del__')


a = A()
import sys

"""
    查看引用计数
    比期望值总是多1，由调用函数会引用一次对象
"""
print(sys.getrefcount(a))

